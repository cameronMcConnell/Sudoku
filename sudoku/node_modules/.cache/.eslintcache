[{"/home/angry-dogman/.repos/Sudoku/sudoku/src/index.tsx":"1","/home/angry-dogman/.repos/Sudoku/sudoku/src/App.tsx":"2"},{"size":273,"mtime":1694818171300,"results":"3","hashOfConfig":"4"},{"size":10529,"mtime":1694819081906,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e1z8xc",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/home/angry-dogman/.repos/Sudoku/sudoku/src/index.tsx",[],[],"/home/angry-dogman/.repos/Sudoku/sudoku/src/App.tsx",["13"],[],"import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\n// Interface for options button rendering.\ninterface optionsObject {\n  title: string,\n  brdrClr: string\n}\n\n// Interface for objects that make up the elements of the board.\ninterface boardObject {\n  val: number,\n  index: number,\n  isStatic: boolean\n}\n\nconst App = () => {\n\n  // Create the board.\n  const createBoard = (): boardObject[][] => {\n    let b: boardObject[][] = [];\n    \n    for (let i: number = 0; i < 9; i++) {\n      b.push([]);\n      for (let j: number = 0; j < 9; j++) {\n        b[i].push({val: 0, index: (i * 9) + j, isStatic: false});\n      }\n    }\n\n    return b;\n  }\n  \n  // The board that will be edited and changed to solve the sudoku.\n  // Needed to make 2D array of special objects that have unqiue indexs.\n  let [board, setBoard] = useState<boardObject[][]>(createBoard());\n\n  // 0 = easy, 1 = medium, 2 = hard\n  let [curDiff, setCurDiff] = useState<number>(0);\n\n  // Used for check button press.\n  const [solved, setSolved] = useState<boolean>(false);\n\n  // Used to help solved state in button on click event.\n  const [newBoard, setNewBoard] = useState<boolean>(true);\n\n  // used to initially show loading screen until get request is completed.\n  let [loading, setLoading] = useState<boolean>(true);\n  \n  // Used to render difficulty buttons.\n  const difficulties: string[] = ['Easy', 'Medium', 'Hard'];\n\n  // Used for animation after solving board.\n  let animations: number[][] = [];\n  \n  // Used to render options buttons and their colors. \n  const options: optionsObject[] = [\n    {\n      title: 'Solve',\n      brdrClr: '#0cf345'\n    }, \n    { \n      title: 'Check',\n      brdrClr: '#f30cba'\n    }\n  ];\n\n  // Set initial board difficulty to easy.\n  useEffect(() => { generateEasy() }, []);\n\n  // Switch to chosen difficuly.\n  const chooseDifficulty = (diff: number): void => {\n    setNewBoard(true);\n    setSolved(false);\n\n    switch (diff) {\n      case 0:\n        generateEasy();\n        break;\n      case 1:\n        generateMedium();\n        break;\n      case 2:\n        generateHard();\n        break;\n    }\n  }\n\n  // Switch to choose option.\n  const optionsLogic = (option: string) => {\n    let result: boolean;\n    switch (option) {\n      case 'Solve':\n        solveBoard();\n        setNewBoard(false);\n        setSolved(true);\n        break;\n      case 'Check':\n        result= checkSolution();\n        setNewBoard(false);\n        if (result) {\n          setSolved(true);\n        }\n        break;\n    }\n  }\n\n  // Api request for easy board.\n  async function generateEasy(): Promise<void> {\n    const response: Response = await fetch('https://sugoku.onrender.com/board?difficulty=easy');\n    const data = await response.json();\n    setLoading(false);\n\n    let b: boardObject[][] = createBoard();\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        b[i][j].val = data.board[i][j];\n        if ( b[i][j].val ) { b[i][j].isStatic = true; }\n      }\n    }\n    setCurDiff(0);\n    setBoard(b);\n  }\n\n  // Api request for medium board.\n  const generateMedium = (): void => {\n    fetch('https://sugoku.onrender.com/board?difficulty=medium')\n    .then(response => response.json())\n    .then(data => {\n      let b: boardObject[][] = createBoard();\n      for (let i: number = 0; i < 9; i++) {\n        for (let j: number = 0; j < 9; j++) {\n          b[i][j].val = data.board[i][j];\n          if ( b[i][j].val ) { b[i][j].isStatic = true; }\n        }\n      }\n      setCurDiff(1);\n      setBoard(b);\n    })\n    .catch(error => {\n      console.log('Error: ', error);\n    })\n  }\n\n  // Api request for hard board.\n  const generateHard = (): void => {\n    fetch('https://sugoku.onrender.com/board?difficulty=hard')\n    .then(response => response.json())\n    .then(data => {\n      let b: boardObject[][] = createBoard();\n      for (let i: number = 0; i < 9; i++) {\n        for (let j: number = 0; j < 9; j++) {\n          b[i][j].val = data.board[i][j];\n          if ( b[i][j].val ) { b[i][j].isStatic = true; }\n        }\n      }\n      setCurDiff(2);\n      setBoard(b);\n    })\n    .catch(error => {\n      console.log('Error: ', error);\n    })\n  }\n\n  // Checks to see if valid sudoku board.\n  const checkSolution = (): boolean => {\n    let rows: Set<number>[] = Array.from({ length: 9 }, () => new Set());\n    let cols: Set<number>[] = Array.from({ length: 9}, () => new Set());\n    let boxes: Set<number>[] = Array.from({ length: 9}, () => new Set());\n\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        let boxInd: number = Math.floor(i / 3) * 3 + Math.floor(j / 3); \n        \n        if (board[i][j].val === 0 || board[i][j].val < 0 || board[i][j].val > 9) {\n          return false;\n        }\n\n        if (rows[i].has(board[i][j].val)) {\n          return false;\n        } else {\n          rows[i].add(board[i][j].val);\n        }\n\n        if (cols[j].has(board[i][j].val)) {\n          return false;\n        } else {\n          cols[j].add(board[i][j].val);\n        }\n\n        if (boxes[boxInd].has(board[i][j].val)) {\n          return false;\n        } else {\n          boxes[boxInd].add(board[i][j].val)\n        }\n      }\n    }\n    return true;\n  }\n\n  // Check if current number in position is valid.\n  const isValid = (i: number, j: number, val: number, boardCopy: boardObject[][]): boolean => {\n    for (let k: number = 0; k < 9; k++) {\n      if (boardCopy[i][k].val === val || boardCopy[k][j].val === val) {\n        return false;\n      }\n    }\n\n    var i0: number = Math.floor(i / 3) * 3;\n    var j0: number = Math.floor(j / 3) * 3;\n\n    for (let l: number = 0; l < 3; l++) {\n      for (let m: number = 0; m < 0; m++) {\n        if (boardCopy[i + i0][j + j0].val === val) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Brute-force and backtracking algorithm to solve the board.\n  const solve = (boardCopy: boardObject[][]): boolean => {\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        if (boardCopy[i][j].val === 0) {\n          for (let val: number = 1; val < 10; val++) {\n            if (isValid(i, j, val, boardCopy)) {\n              animations.push([boardCopy[i][j].index, val]);\n              boardCopy[i][j].val = val;\n              if (solve(boardCopy)) {return true};\n              animations.push([boardCopy[i][j].index, 0]);\n              boardCopy[i][j].val = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // Goes through the animations array and shows the process on the board.\n  const animate = (): void => {\n    let inputs: HTMLInputElement[] = Array.from(document.querySelectorAll('input'));\n    let inputsDict: {[key: string]: HTMLInputElement} = {};\n    \n    for (let input of inputs) {\n      inputsDict[input.name] = input;\n    }\n    \n    let kft: number = 0;\n    let animationSpeed: number = 1.5;\n    \n    for (const x of animations) {\n      setTimeout(() => {\n        if (x[1] === 0) {\n          inputsDict[x[0].toString()].value = '';\n        } else {\n          inputsDict[x[0].toString()].value = x[1].toString();\n        }\n      }, (kft * 4));\n      kft += animationSpeed;\n    }\n\n    animations = [];\n    setBoard(board);\n  }\n\n  // Solves the board and does animation.\n  const solveBoard = (): void => {\n    var boardCopy: boardObject[][] = JSON.parse(JSON.stringify(board));\n    solve(boardCopy);\n    animate();\n  }\n\n  // Used for on change event from input in grid.\n  const updateBoard = (e: React.ChangeEvent<HTMLInputElement>, i: number, j: number) => {\n    e.preventDefault();\n    let inputVal: number | undefined = parseInt(e.target.value);\n    \n    if (inputVal && inputVal < 10 && inputVal > -1 ) {\n      board[i][j].val = inputVal;\n    } else {\n      board[i][j].val = 0;\n    }\n    \n    setBoard(board);\n  }\n\n  // Sets all non-static values in board to empty.\n  const clearBoard = (): void => {\n    let inputs: HTMLInputElement[] = Array.from(document.querySelectorAll('input'));\n\n    for (let input of inputs) { input.value = ''; }\n\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        if (!board[i][j].isStatic) { board[i][j].val = 0; }\n      }\n    }\n\n    setSolved(false);\n    setNewBoard(true);\n    setBoard(board);\n  }\n\n  // Decides classname for td elements given index values.\n  const determineClassName = (i: number, j: number): string => {\n    let className: string = '';\n    if (!((i + 1) % 3)) {\n      className += 'bottom-border';\n    }\n    if (!((j + 1) % 3)) {\n      className += ' right-border';\n    }\n    if (!i) {\n      className += ' top-border'\n    }\n    if (!j) {\n      className += ' left-border'\n    }\n    return className;\n  }\n\n  // Resolved after init api get request.\n  if (loading) {\n    return ( \n      <div id='loading-container'>\n        <i className=\"fa fa-repeat fa-spin\" id='loading-icon'></i>\n        <h1>Loading</h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className='container'>\n      <header id='header'>\n        <h1>Sudoku</h1>\n        <h2 key={curDiff}>Difficulty: {curDiff === 0 ? 'Easy': curDiff === 1 ? 'Medium' : 'Hard'}</h2>\n        <div id='header-button-container'>\n          {difficulties.map((diffs: string, ind: number) => (\n            <button className='diff-button' key={ind} onClick={() => chooseDifficulty(ind)}>{diffs}</button>\n          ))}\n          <button className='diff-button' style={{borderColor: '#26f7fd'}} onClick={() => clearBoard()}>Clear</button>\n          {options.map((option: optionsObject) => (\n            <button className='diff-button' style={{borderColor: option.brdrClr}}\n            key={option.title} onClick={() => optionsLogic(option.title)}>{option.title}</button>\n          ))}\n          {(!newBoard && solved) ? <div className='thumb-div'>👍</div>: ''}\n          {(!newBoard && !solved) ? <div className='thumb-div'>👎</div>: ''}\n        </div>\n      </header>\n      <div id='board-container'>\n        <table>\n          <tbody>\n            {board.map((row: boardObject[], i: number) => (\n              <tr>\n                {row.map((col: boardObject, j: number) => (\n                  <td className={determineClassName(i, j)}>\n                    {col.isStatic ? col.val\n                     : <input name={col.index.toString()} onChange={(e) => updateBoard(e, i, j)}></input>}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"14","severity":1,"message":"15","line":69,"column":39,"nodeType":"16","endLine":69,"endColumn":41,"suggestions":"17"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateEasy'. Either include it or remove the dependency array.","ArrayExpression",["18"],{"desc":"19","fix":"20"},"Update the dependencies array to be: [generateEasy]",{"range":"21","text":"22"},[1803,1805],"[generateEasy]"]