{"ast":null,"code":"var _jsxFileName = \"/home/angry-dogman/.repos/Sudoku/sudoku/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\n// Interface for options button rendering.\n\n// Interface for objects that make up the elements of the board.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Create the board.\n  const createBoard = () => {\n    let b = [];\n    for (let i = 0; i < 9; i++) {\n      b.push([]);\n      for (let j = 0; j < 9; j++) {\n        b[i].push({\n          val: 0,\n          index: i * 9 + j,\n          isStatic: false\n        });\n      }\n    }\n    return b;\n  };\n\n  // The board that will be edited and changed to solve the sudoku.\n  // Needed to make 2D array of special objects that have unqiue indexs.\n  let [board, setBoard] = useState(createBoard());\n\n  // 0 = easy, 1 = medium, 2 = hard\n  let [curDiff, setCurDiff] = useState(0);\n\n  // Used for check button press.\n  const [solved, setSolved] = useState(false);\n\n  // Used to help solved state in button on click event.\n  const [newBoard, setNewBoard] = useState(true);\n\n  // used to initially show loading screen until get request is completed.\n  let [loading, setLoading] = useState(true);\n\n  // Used to render difficulty buttons.\n  const difficulties = ['Easy', 'Medium', 'Hard'];\n\n  // Used for animation after solving board.\n  let animations = [];\n\n  // Used to render options buttons and their colors. \n  const options = [{\n    title: 'Solve',\n    brdrClr: '#0cf345'\n  }, {\n    title: 'Check',\n    brdrClr: '#f30cba'\n  }];\n\n  // Set initial board difficulty to easy.\n  useEffect(() => {\n    generateEasy();\n  }, []);\n\n  // Switch to chosen difficuly.\n  const chooseDifficulty = diff => {\n    setNewBoard(true);\n    setSolved(false);\n    switch (diff) {\n      case 0:\n        generateEasy();\n        break;\n      case 1:\n        generateMedium();\n        break;\n      case 2:\n        generateHard();\n        break;\n    }\n  };\n\n  // Switch to choose option.\n  const optionsLogic = option => {\n    let result;\n    switch (option) {\n      case 'Solve':\n        solveBoard();\n        setNewBoard(false);\n        setSolved(true);\n        break;\n      case 'Check':\n        result = checkSolution();\n        setNewBoard(false);\n        if (result) {\n          setSolved(true);\n        }\n        break;\n    }\n  };\n\n  // Api request for easy board.\n  async function generateEasy() {\n    const response = await fetch('https://sugoku.onrender.com/board?difficulty=easy');\n    const data = await response.json();\n    setLoading(false);\n    let b = createBoard();\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        b[i][j].val = data.board[i][j];\n        if (b[i][j].val) {\n          b[i][j].isStatic = true;\n        }\n      }\n    }\n    setCurDiff(0);\n    setBoard(b);\n  }\n\n  // Api request for medium board.\n  const generateMedium = () => {\n    fetch('https://sugoku.onrender.com/board?difficulty=medium').then(response => response.json()).then(data => {\n      let b = createBoard();\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          b[i][j].val = data.board[i][j];\n          if (b[i][j].val) {\n            b[i][j].isStatic = true;\n          }\n        }\n      }\n      setCurDiff(1);\n      setBoard(b);\n    }).catch(error => {\n      console.log('Error: ', error);\n    });\n  };\n\n  // Api request for hard board.\n  const generateHard = () => {\n    fetch('https://sugoku.onrender.com/board?difficulty=hard').then(response => response.json()).then(data => {\n      let b = createBoard();\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          b[i][j].val = data.board[i][j];\n          if (b[i][j].val) {\n            b[i][j].isStatic = true;\n          }\n        }\n      }\n      setCurDiff(2);\n      setBoard(b);\n    }).catch(error => {\n      console.log('Error: ', error);\n    });\n  };\n\n  // Checks to see if valid sudoku board.\n  const checkSolution = () => {\n    let rows = Array.from({\n      length: 9\n    }, () => new Set());\n    let cols = Array.from({\n      length: 9\n    }, () => new Set());\n    let boxes = Array.from({\n      length: 9\n    }, () => new Set());\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        let boxInd = Math.floor(i / 3) * 3 + Math.floor(j / 3);\n        if (board[i][j].val === 0 || board[i][j].val < 0 || board[i][j].val > 9) {\n          return false;\n        }\n        if (rows[i].has(board[i][j].val)) {\n          return false;\n        } else {\n          rows[i].add(board[i][j].val);\n        }\n        if (cols[j].has(board[i][j].val)) {\n          return false;\n        } else {\n          cols[j].add(board[i][j].val);\n        }\n        if (boxes[boxInd].has(board[i][j].val)) {\n          return false;\n        } else {\n          boxes[boxInd].add(board[i][j].val);\n        }\n      }\n    }\n    return true;\n  };\n\n  // Check if current number in position is valid.\n  const isValid = (i, j, val, boardCopy) => {\n    for (let k = 0; k < 9; k++) {\n      if (boardCopy[i][k].val === val || boardCopy[k][j].val === val) {\n        return false;\n      }\n    }\n    var i0 = Math.floor(i / 3) * 3;\n    var j0 = Math.floor(j / 3) * 3;\n    for (let l = 0; l < 3; l++) {\n      for (let m = 0; m < 0; m++) {\n        if (boardCopy[i + i0][j + j0].val === val) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  // Brute-force and backtracking algorithm to solve the board.\n  const solve = boardCopy => {\n    for (let i = 0; i < 9; i++) {}\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (boardCopy[i][j].val === 0) {\n          for (let val = 1; val < 10; val++) {\n            if (isValid(i, j, val, boardCopy)) {\n              animations.push([boardCopy[i][j].index, val]);\n              boardCopy[i][j].val = val;\n              if (solve(boardCopy)) {\n                return true;\n              }\n              ;\n              animations.push([boardCopy[i][j].index, 0]);\n              boardCopy[i][j].val = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  // Goes through the animations array and shows the process on the board.\n  const animate = () => {\n    let inputs = Array.from(document.querySelectorAll('input'));\n    let inputsDict = {};\n    for (let input of inputs) {\n      inputsDict[input.name] = input;\n    }\n    let kft = 0;\n    let animationSpeed = 1.5;\n    for (const x of animations) {\n      setTimeout(() => {\n        if (x[1] === 0) {\n          inputsDict[x[0].toString()].value = '';\n        } else {\n          inputsDict[x[0].toString()].value = x[1].toString();\n        }\n      }, kft * 4);\n      kft += animationSpeed;\n    }\n    animations = [];\n    setBoard(board);\n  };\n\n  // Solves the board and does animation.\n  const solveBoard = () => {\n    var boardCopy = JSON.parse(JSON.stringify(board));\n    solve(boardCopy);\n    animate();\n  };\n\n  // Used for on change event from input in grid.\n  const updateBoard = (e, i, j) => {\n    e.preventDefault();\n    let inputVal = parseInt(e.target.value);\n    if (inputVal && inputVal < 10 && inputVal > -1) {\n      board[i][j].val = inputVal;\n    } else {\n      board[i][j].val = 0;\n    }\n    setBoard(board);\n  };\n\n  // Sets all non-static values in board to empty.\n  const clearBoard = () => {\n    let inputs = Array.from(document.querySelectorAll('input'));\n    for (let input of inputs) {\n      input.value = '';\n    }\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (!board[i][j].isStatic) {\n          board[i][j].val = 0;\n        }\n      }\n    }\n    setSolved(false);\n    setNewBoard(true);\n    setBoard(board);\n  };\n\n  // Decides classname for td elements given index values.\n  const determineClassName = (i, j) => {\n    let className = '';\n    if (!((i + 1) % 3)) {\n      className += 'bottom-border';\n    }\n    if (!((j + 1) % 3)) {\n      className += ' right-border';\n    }\n    if (!i) {\n      className += ' top-border';\n    }\n    if (!j) {\n      className += ' left-border';\n    }\n    return className;\n  };\n\n  // Resolved after init api get request.\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa fa-repeat fa-spin\",\n        id: \"loading-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sudoku\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Difficulty: \", curDiff === 0 ? 'Easy' : curDiff === 1 ? 'Medium' : 'Hard']\n      }, curDiff, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"header-button-container\",\n        children: [difficulties.map((diffs, ind) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"diff-button\",\n          onClick: () => chooseDifficulty(ind),\n          children: diffs\n        }, ind, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"diff-button\",\n          style: {\n            borderColor: '#26f7fd'\n          },\n          onClick: () => clearBoard(),\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"diff-button\",\n          style: {\n            borderColor: option.brdrClr\n          },\n          onClick: () => optionsLogic(option.title),\n          children: option.title\n        }, option.title, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)), !newBoard && solved ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"thumb-div\",\n          children: \"\\uD83D\\uDC4D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 36\n        }, this) : '', !newBoard && !solved ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"thumb-div\",\n          children: \"\\uD83D\\uDC4E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 37\n        }, this) : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: board.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((col, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n              className: determineClassName(i, j),\n              children: col.isStatic ? col.val : /*#__PURE__*/_jsxDEV(\"input\", {\n                name: col.index.toString(),\n                onChange: e => updateBoard(e, i, j)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JD5KsXgqu3cdXSHYAV+l53ZwNhw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","createBoard","b","i","push","j","val","index","isStatic","board","setBoard","curDiff","setCurDiff","solved","setSolved","newBoard","setNewBoard","loading","setLoading","difficulties","animations","options","title","brdrClr","generateEasy","chooseDifficulty","diff","generateMedium","generateHard","optionsLogic","option","result","solveBoard","checkSolution","response","fetch","data","json","then","catch","error","console","log","rows","Array","from","length","Set","cols","boxes","boxInd","Math","floor","has","add","isValid","boardCopy","k","i0","j0","l","m","solve","animate","inputs","document","querySelectorAll","inputsDict","input","name","kft","animationSpeed","x","setTimeout","toString","value","JSON","parse","stringify","updateBoard","e","preventDefault","inputVal","parseInt","target","clearBoard","determineClassName","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","diffs","ind","onClick","style","borderColor","row","col","onChange","_c","$RefreshReg$"],"sources":["/home/angry-dogman/.repos/Sudoku/sudoku/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\n// Interface for options button rendering.\ninterface optionsObject {\n  title: string,\n  brdrClr: string\n}\n\n// Interface for objects that make up the elements of the board.\ninterface boardObject {\n  val: number,\n  index: number,\n  isStatic: boolean\n}\n\nconst App = () => {\n\n  // Create the board.\n  const createBoard = (): boardObject[][] => {\n    let b: boardObject[][] = [];\n    \n    for (let i: number = 0; i < 9; i++) {\n      b.push([]);\n      for (let j: number = 0; j < 9; j++) {\n        b[i].push({val: 0, index: (i * 9) + j, isStatic: false});\n      }\n    }\n\n    return b;\n  }\n  \n  // The board that will be edited and changed to solve the sudoku.\n  // Needed to make 2D array of special objects that have unqiue indexs.\n  let [board, setBoard] = useState<boardObject[][]>(createBoard());\n\n  // 0 = easy, 1 = medium, 2 = hard\n  let [curDiff, setCurDiff] = useState<number>(0);\n\n  // Used for check button press.\n  const [solved, setSolved] = useState<boolean>(false);\n\n  // Used to help solved state in button on click event.\n  const [newBoard, setNewBoard] = useState<boolean>(true);\n\n  // used to initially show loading screen until get request is completed.\n  let [loading, setLoading] = useState<boolean>(true);\n  \n  // Used to render difficulty buttons.\n  const difficulties: string[] = ['Easy', 'Medium', 'Hard'];\n\n  // Used for animation after solving board.\n  let animations: number[][] = [];\n  \n  // Used to render options buttons and their colors. \n  const options: optionsObject[] = [\n    {\n      title: 'Solve',\n      brdrClr: '#0cf345'\n    }, \n    { \n      title: 'Check',\n      brdrClr: '#f30cba'\n    }\n  ];\n\n  // Set initial board difficulty to easy.\n  useEffect(() => { generateEasy() }, []);\n\n  // Switch to chosen difficuly.\n  const chooseDifficulty = (diff: number): void => {\n    setNewBoard(true);\n    setSolved(false);\n\n    switch (diff) {\n      case 0:\n        generateEasy();\n        break;\n      case 1:\n        generateMedium();\n        break;\n      case 2:\n        generateHard();\n        break;\n    }\n  }\n\n  // Switch to choose option.\n  const optionsLogic = (option: string) => {\n    let result: boolean;\n    switch (option) {\n      case 'Solve':\n        solveBoard();\n        setNewBoard(false);\n        setSolved(true);\n        break;\n      case 'Check':\n        result= checkSolution();\n        setNewBoard(false);\n        if (result) {\n          setSolved(true);\n        }\n        break;\n    }\n  }\n\n  // Api request for easy board.\n  async function generateEasy(): Promise<void> {\n    const response: Response = await fetch('https://sugoku.onrender.com/board?difficulty=easy');\n    const data = await response.json();\n    setLoading(false);\n\n    let b: boardObject[][] = createBoard();\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        b[i][j].val = data.board[i][j];\n        if ( b[i][j].val ) { b[i][j].isStatic = true; }\n      }\n    }\n    setCurDiff(0);\n    setBoard(b);\n  }\n\n  // Api request for medium board.\n  const generateMedium = (): void => {\n    fetch('https://sugoku.onrender.com/board?difficulty=medium')\n    .then(response => response.json())\n    .then(data => {\n      let b: boardObject[][] = createBoard();\n      for (let i: number = 0; i < 9; i++) {\n        for (let j: number = 0; j < 9; j++) {\n          b[i][j].val = data.board[i][j];\n          if ( b[i][j].val ) { b[i][j].isStatic = true; }\n        }\n      }\n      setCurDiff(1);\n      setBoard(b);\n    })\n    .catch(error => {\n      console.log('Error: ', error);\n    })\n  }\n\n  // Api request for hard board.\n  const generateHard = (): void => {\n    fetch('https://sugoku.onrender.com/board?difficulty=hard')\n    .then(response => response.json())\n    .then(data => {\n      let b: boardObject[][] = createBoard();\n      for (let i: number = 0; i < 9; i++) {\n        for (let j: number = 0; j < 9; j++) {\n          b[i][j].val = data.board[i][j];\n          if ( b[i][j].val ) { b[i][j].isStatic = true; }\n        }\n      }\n      setCurDiff(2);\n      setBoard(b);\n    })\n    .catch(error => {\n      console.log('Error: ', error);\n    })\n  }\n\n  // Checks to see if valid sudoku board.\n  const checkSolution = (): boolean => {\n    let rows: Set<number>[] = Array.from({ length: 9 }, () => new Set());\n    let cols: Set<number>[] = Array.from({ length: 9}, () => new Set());\n    let boxes: Set<number>[] = Array.from({ length: 9}, () => new Set());\n\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        let boxInd: number = Math.floor(i / 3) * 3 + Math.floor(j / 3); \n        \n        if (board[i][j].val === 0 || board[i][j].val < 0 || board[i][j].val > 9) {\n          return false;\n        }\n\n        if (rows[i].has(board[i][j].val)) {\n          return false;\n        } else {\n          rows[i].add(board[i][j].val);\n        }\n\n        if (cols[j].has(board[i][j].val)) {\n          return false;\n        } else {\n          cols[j].add(board[i][j].val);\n        }\n\n        if (boxes[boxInd].has(board[i][j].val)) {\n          return false;\n        } else {\n          boxes[boxInd].add(board[i][j].val)\n        }\n      }\n    }\n    return true;\n  }\n\n  // Check if current number in position is valid.\n  const isValid = (i: number, j: number, val: number, boardCopy: boardObject[][]): boolean => {\n    for (let k: number = 0; k < 9; k++) {\n      if (boardCopy[i][k].val === val || boardCopy[k][j].val === val) {\n        return false;\n      }\n    }\n\n    var i0: number = Math.floor(i / 3) * 3;\n    var j0: number = Math.floor(j / 3) * 3;\n\n    for (let l: number = 0; l < 3; l++) {\n      for (let m: number = 0; m < 0; m++) {\n        if (boardCopy[i + i0][j + j0].val === val) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Brute-force and backtracking algorithm to solve the board.\n  const solve = (boardCopy: boardObject[][]): boolean => {\n    for (let i: number = 0; i < 9; i++) {\n      \n    }\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        if (boardCopy[i][j].val === 0) {\n          for (let val: number = 1; val < 10; val++) {\n            if (isValid(i, j, val, boardCopy)) {\n              animations.push([boardCopy[i][j].index, val]);\n              boardCopy[i][j].val = val;\n              if (solve(boardCopy)) {return true};\n              animations.push([boardCopy[i][j].index, 0]);\n              boardCopy[i][j].val = 0;\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // Goes through the animations array and shows the process on the board.\n  const animate = (): void => {\n    let inputs: HTMLInputElement[] = Array.from(document.querySelectorAll('input'));\n    let inputsDict: {[key: string]: HTMLInputElement} = {};\n    \n    for (let input of inputs) {\n      inputsDict[input.name] = input;\n    }\n    \n    let kft: number = 0;\n    let animationSpeed: number = 1.5;\n    \n    for (const x of animations) {\n      setTimeout(() => {\n        if (x[1] === 0) {\n          inputsDict[x[0].toString()].value = '';\n        } else {\n          inputsDict[x[0].toString()].value = x[1].toString();\n        }\n      }, (kft * 4));\n      kft += animationSpeed;\n    }\n\n    animations = [];\n    setBoard(board);\n  }\n\n  // Solves the board and does animation.\n  const solveBoard = (): void => {\n    var boardCopy: boardObject[][] = JSON.parse(JSON.stringify(board));\n    solve(boardCopy);\n    animate();\n  }\n\n  // Used for on change event from input in grid.\n  const updateBoard = (e: React.ChangeEvent<HTMLInputElement>, i: number, j: number) => {\n    e.preventDefault();\n    let inputVal: number | undefined = parseInt(e.target.value);\n    \n    if (inputVal && inputVal < 10 && inputVal > -1 ) {\n      board[i][j].val = inputVal;\n    } else {\n      board[i][j].val = 0;\n    }\n    \n    setBoard(board);\n  }\n\n  // Sets all non-static values in board to empty.\n  const clearBoard = (): void => {\n    let inputs: HTMLInputElement[] = Array.from(document.querySelectorAll('input'));\n\n    for (let input of inputs) { input.value = ''; }\n\n    for (let i: number = 0; i < 9; i++) {\n      for (let j: number = 0; j < 9; j++) {\n        if (!board[i][j].isStatic) { board[i][j].val = 0; }\n      }\n    }\n\n    setSolved(false);\n    setNewBoard(true);\n    setBoard(board);\n  }\n\n  // Decides classname for td elements given index values.\n  const determineClassName = (i: number, j: number): string => {\n    let className: string = '';\n    if (!((i + 1) % 3)) {\n      className += 'bottom-border';\n    }\n    if (!((j + 1) % 3)) {\n      className += ' right-border';\n    }\n    if (!i) {\n      className += ' top-border'\n    }\n    if (!j) {\n      className += ' left-border'\n    }\n    return className;\n  }\n\n  // Resolved after init api get request.\n  if (loading) {\n    return ( \n      <div id='loading-container'>\n        <i className=\"fa fa-repeat fa-spin\" id='loading-icon'></i>\n        <h1>Loading</h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className='container'>\n      <header id='header'>\n        <h1>Sudoku</h1>\n        <h2 key={curDiff}>Difficulty: {curDiff === 0 ? 'Easy': curDiff === 1 ? 'Medium' : 'Hard'}</h2>\n        <div id='header-button-container'>\n          {difficulties.map((diffs: string, ind: number) => (\n            <button className='diff-button' key={ind} onClick={() => chooseDifficulty(ind)}>{diffs}</button>\n          ))}\n          <button className='diff-button' style={{borderColor: '#26f7fd'}} onClick={() => clearBoard()}>Clear</button>\n          {options.map((option: optionsObject) => (\n            <button className='diff-button' style={{borderColor: option.brdrClr}}\n            key={option.title} onClick={() => optionsLogic(option.title)}>{option.title}</button>\n          ))}\n          {(!newBoard && solved) ? <div className='thumb-div'>👍</div>: ''}\n          {(!newBoard && !solved) ? <div className='thumb-div'>👎</div>: ''}\n        </div>\n      </header>\n      <div id='board-container'>\n        <table>\n          <tbody>\n            {board.map((row: boardObject[], i: number) => (\n              <tr>\n                {row.map((col: boardObject, j: number) => (\n                  <td className={determineClassName(i, j)}>\n                    {col.isStatic ? col.val\n                     : <input name={col.index.toString()} onChange={(e) => updateBoard(e, i, j)}></input>}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW;;AAElB;;AAMA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAuB;IACzC,IAAIC,CAAkB,GAAG,EAAE;IAE3B,KAAK,IAAIC,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClCD,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;MACV,KAAK,IAAIC,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClCH,CAAC,CAACC,CAAC,CAAC,CAACC,IAAI,CAAC;UAACE,GAAG,EAAE,CAAC;UAAEC,KAAK,EAAGJ,CAAC,GAAG,CAAC,GAAIE,CAAC;UAAEG,QAAQ,EAAE;QAAK,CAAC,CAAC;MAC1D;IACF;IAEA,OAAON,CAAC;EACV,CAAC;;EAED;EACA;EACA,IAAI,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAkBM,WAAW,CAAC,CAAC,CAAC;;EAEhE;EACA,IAAI,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAS,CAAC,CAAC;;EAE/C;EACA,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAU,KAAK,CAAC;;EAEpD;EACA,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAU,IAAI,CAAC;;EAEvD;EACA,IAAI,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAU,IAAI,CAAC;;EAEnD;EACA,MAAMwB,YAAsB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC;;EAEzD;EACA,IAAIC,UAAsB,GAAG,EAAE;;EAE/B;EACA,MAAMC,OAAwB,GAAG,CAC/B;IACEC,KAAK,EAAE,OAAO;IACdC,OAAO,EAAE;EACX,CAAC,EACD;IACED,KAAK,EAAE,OAAO;IACdC,OAAO,EAAE;EACX,CAAC,CACF;;EAED;EACA3B,SAAS,CAAC,MAAM;IAAE4B,YAAY,CAAC,CAAC;EAAC,CAAC,EAAE,EAAE,CAAC;;EAEvC;EACA,MAAMC,gBAAgB,GAAIC,IAAY,IAAW;IAC/CV,WAAW,CAAC,IAAI,CAAC;IACjBF,SAAS,CAAC,KAAK,CAAC;IAEhB,QAAQY,IAAI;MACV,KAAK,CAAC;QACJF,YAAY,CAAC,CAAC;QACd;MACF,KAAK,CAAC;QACJG,cAAc,CAAC,CAAC;QAChB;MACF,KAAK,CAAC;QACJC,YAAY,CAAC,CAAC;QACd;IACJ;EACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIC,MAAc,IAAK;IACvC,IAAIC,MAAe;IACnB,QAAQD,MAAM;MACZ,KAAK,OAAO;QACVE,UAAU,CAAC,CAAC;QACZhB,WAAW,CAAC,KAAK,CAAC;QAClBF,SAAS,CAAC,IAAI,CAAC;QACf;MACF,KAAK,OAAO;QACViB,MAAM,GAAEE,aAAa,CAAC,CAAC;QACvBjB,WAAW,CAAC,KAAK,CAAC;QAClB,IAAIe,MAAM,EAAE;UACVjB,SAAS,CAAC,IAAI,CAAC;QACjB;QACA;IACJ;EACF,CAAC;;EAED;EACA,eAAeU,YAAYA,CAAA,EAAkB;IAC3C,MAAMU,QAAkB,GAAG,MAAMC,KAAK,CAAC,mDAAmD,CAAC;IAC3F,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCnB,UAAU,CAAC,KAAK,CAAC;IAEjB,IAAIhB,CAAkB,GAAGD,WAAW,CAAC,CAAC;IACtC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClCH,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG8B,IAAI,CAAC3B,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC;QAC9B,IAAKH,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,EAAG;UAAEJ,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACG,QAAQ,GAAG,IAAI;QAAE;MAChD;IACF;IACAI,UAAU,CAAC,CAAC,CAAC;IACbF,QAAQ,CAACR,CAAC,CAAC;EACb;;EAEA;EACA,MAAMyB,cAAc,GAAGA,CAAA,KAAY;IACjCQ,KAAK,CAAC,qDAAqD,CAAC,CAC3DG,IAAI,CAACJ,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CACjCC,IAAI,CAACF,IAAI,IAAI;MACZ,IAAIlC,CAAkB,GAAGD,WAAW,CAAC,CAAC;MACtC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAClCH,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG8B,IAAI,CAAC3B,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC;UAC9B,IAAKH,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,EAAG;YAAEJ,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACG,QAAQ,GAAG,IAAI;UAAE;QAChD;MACF;MACAI,UAAU,CAAC,CAAC,CAAC;MACbF,QAAQ,CAACR,CAAC,CAAC;IACb,CAAC,CAAC,CACDqC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,KAAK,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMZ,YAAY,GAAGA,CAAA,KAAY;IAC/BO,KAAK,CAAC,mDAAmD,CAAC,CACzDG,IAAI,CAACJ,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CACjCC,IAAI,CAACF,IAAI,IAAI;MACZ,IAAIlC,CAAkB,GAAGD,WAAW,CAAC,CAAC;MACtC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAClCH,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG8B,IAAI,CAAC3B,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC;UAC9B,IAAKH,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,EAAG;YAAEJ,CAAC,CAACC,CAAC,CAAC,CAACE,CAAC,CAAC,CAACG,QAAQ,GAAG,IAAI;UAAE;QAChD;MACF;MACAI,UAAU,CAAC,CAAC,CAAC;MACbF,QAAQ,CAACR,CAAC,CAAC;IACb,CAAC,CAAC,CACDqC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,KAAK,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMP,aAAa,GAAGA,CAAA,KAAe;IACnC,IAAIU,IAAmB,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,EAAE,MAAM,IAAIC,GAAG,CAAC,CAAC,CAAC;IACpE,IAAIC,IAAmB,GAAGJ,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAC,CAAC,EAAE,MAAM,IAAIC,GAAG,CAAC,CAAC,CAAC;IACnE,IAAIE,KAAoB,GAAGL,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAC,CAAC,EAAE,MAAM,IAAIC,GAAG,CAAC,CAAC,CAAC;IAEpE,KAAK,IAAI5C,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClC,IAAI6C,MAAc,GAAGC,IAAI,CAACC,KAAK,CAACjD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAGgD,IAAI,CAACC,KAAK,CAAC/C,CAAC,GAAG,CAAC,CAAC;QAE9D,IAAII,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,KAAK,CAAC,IAAIG,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG,CAAC,IAAIG,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG,CAAC,EAAE;UACvE,OAAO,KAAK;QACd;QAEA,IAAIqC,IAAI,CAACxC,CAAC,CAAC,CAACkD,GAAG,CAAC5C,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE;UAChC,OAAO,KAAK;QACd,CAAC,MAAM;UACLqC,IAAI,CAACxC,CAAC,CAAC,CAACmD,GAAG,CAAC7C,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,CAAC;QAC9B;QAEA,IAAI0C,IAAI,CAAC3C,CAAC,CAAC,CAACgD,GAAG,CAAC5C,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE;UAChC,OAAO,KAAK;QACd,CAAC,MAAM;UACL0C,IAAI,CAAC3C,CAAC,CAAC,CAACiD,GAAG,CAAC7C,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,CAAC;QAC9B;QAEA,IAAI2C,KAAK,CAACC,MAAM,CAAC,CAACG,GAAG,CAAC5C,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE;UACtC,OAAO,KAAK;QACd,CAAC,MAAM;UACL2C,KAAK,CAACC,MAAM,CAAC,CAACI,GAAG,CAAC7C,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,CAAC;QACpC;MACF;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMiD,OAAO,GAAGA,CAACpD,CAAS,EAAEE,CAAS,EAAEC,GAAW,EAAEkD,SAA0B,KAAc;IAC1F,KAAK,IAAIC,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,IAAID,SAAS,CAACrD,CAAC,CAAC,CAACsD,CAAC,CAAC,CAACnD,GAAG,KAAKA,GAAG,IAAIkD,SAAS,CAACC,CAAC,CAAC,CAACpD,CAAC,CAAC,CAACC,GAAG,KAAKA,GAAG,EAAE;QAC9D,OAAO,KAAK;MACd;IACF;IAEA,IAAIoD,EAAU,GAAGP,IAAI,CAACC,KAAK,CAACjD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACtC,IAAIwD,EAAU,GAAGR,IAAI,CAACC,KAAK,CAAC/C,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAEtC,KAAK,IAAIuD,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,KAAK,IAAIC,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClC,IAAIL,SAAS,CAACrD,CAAC,GAAGuD,EAAE,CAAC,CAACrD,CAAC,GAAGsD,EAAE,CAAC,CAACrD,GAAG,KAAKA,GAAG,EAAE;UACzC,OAAO,KAAK;QACd;MACF;IACF;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMwD,KAAK,GAAIN,SAA0B,IAAc;IACrD,KAAK,IAAIrD,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE,CAEpC;IACA,KAAK,IAAIA,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClC,IAAImD,SAAS,CAACrD,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,KAAK,CAAC,EAAE;UAC7B,KAAK,IAAIA,GAAW,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;YACzC,IAAIiD,OAAO,CAACpD,CAAC,EAAEE,CAAC,EAAEC,GAAG,EAAEkD,SAAS,CAAC,EAAE;cACjCpC,UAAU,CAAChB,IAAI,CAAC,CAACoD,SAAS,CAACrD,CAAC,CAAC,CAACE,CAAC,CAAC,CAACE,KAAK,EAAED,GAAG,CAAC,CAAC;cAC7CkD,SAAS,CAACrD,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAGA,GAAG;cACzB,IAAIwD,KAAK,CAACN,SAAS,CAAC,EAAE;gBAAC,OAAO,IAAI;cAAA;cAAC;cACnCpC,UAAU,CAAChB,IAAI,CAAC,CAACoD,SAAS,CAACrD,CAAC,CAAC,CAACE,CAAC,CAAC,CAACE,KAAK,EAAE,CAAC,CAAC,CAAC;cAC3CiD,SAAS,CAACrD,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG,CAAC;YACzB;UACF;UACA,OAAO,KAAK;QACd;MACF;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMyD,OAAO,GAAGA,CAAA,KAAY;IAC1B,IAAIC,MAA0B,GAAGpB,KAAK,CAACC,IAAI,CAACoB,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC/E,IAAIC,UAA6C,GAAG,CAAC,CAAC;IAEtD,KAAK,IAAIC,KAAK,IAAIJ,MAAM,EAAE;MACxBG,UAAU,CAACC,KAAK,CAACC,IAAI,CAAC,GAAGD,KAAK;IAChC;IAEA,IAAIE,GAAW,GAAG,CAAC;IACnB,IAAIC,cAAsB,GAAG,GAAG;IAEhC,KAAK,MAAMC,CAAC,IAAIpD,UAAU,EAAE;MAC1BqD,UAAU,CAAC,MAAM;QACf,IAAID,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;UACdL,UAAU,CAACK,CAAC,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,EAAE;QACxC,CAAC,MAAM;UACLR,UAAU,CAACK,CAAC,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACC,KAAK,GAAGH,CAAC,CAAC,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;QACrD;MACF,CAAC,EAAGJ,GAAG,GAAG,CAAE,CAAC;MACbA,GAAG,IAAIC,cAAc;IACvB;IAEAnD,UAAU,GAAG,EAAE;IACfV,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC;;EAED;EACA,MAAMuB,UAAU,GAAGA,CAAA,KAAY;IAC7B,IAAIwB,SAA0B,GAAGoB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACrE,KAAK,CAAC,CAAC;IAClEqD,KAAK,CAACN,SAAS,CAAC;IAChBO,OAAO,CAAC,CAAC;EACX,CAAC;;EAED;EACA,MAAMgB,WAAW,GAAGA,CAACC,CAAsC,EAAE7E,CAAS,EAAEE,CAAS,KAAK;IACpF2E,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIC,QAA4B,GAAGC,QAAQ,CAACH,CAAC,CAACI,MAAM,CAACT,KAAK,CAAC;IAE3D,IAAIO,QAAQ,IAAIA,QAAQ,GAAG,EAAE,IAAIA,QAAQ,GAAG,CAAC,CAAC,EAAG;MAC/CzE,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG4E,QAAQ;IAC5B,CAAC,MAAM;MACLzE,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG,CAAC;IACrB;IAEAI,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC;;EAED;EACA,MAAM4E,UAAU,GAAGA,CAAA,KAAY;IAC7B,IAAIrB,MAA0B,GAAGpB,KAAK,CAACC,IAAI,CAACoB,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAE/E,KAAK,IAAIE,KAAK,IAAIJ,MAAM,EAAE;MAAEI,KAAK,CAACO,KAAK,GAAG,EAAE;IAAE;IAE9C,KAAK,IAAIxE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAClC,IAAI,CAACI,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACG,QAAQ,EAAE;UAAEC,KAAK,CAACN,CAAC,CAAC,CAACE,CAAC,CAAC,CAACC,GAAG,GAAG,CAAC;QAAE;MACpD;IACF;IAEAQ,SAAS,CAAC,KAAK,CAAC;IAChBE,WAAW,CAAC,IAAI,CAAC;IACjBN,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC;;EAED;EACA,MAAM6E,kBAAkB,GAAGA,CAACnF,CAAS,EAAEE,CAAS,KAAa;IAC3D,IAAIkF,SAAiB,GAAG,EAAE;IAC1B,IAAI,EAAE,CAACpF,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;MAClBoF,SAAS,IAAI,eAAe;IAC9B;IACA,IAAI,EAAE,CAAClF,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;MAClBkF,SAAS,IAAI,eAAe;IAC9B;IACA,IAAI,CAACpF,CAAC,EAAE;MACNoF,SAAS,IAAI,aAAa;IAC5B;IACA,IAAI,CAAClF,CAAC,EAAE;MACNkF,SAAS,IAAI,cAAc;IAC7B;IACA,OAAOA,SAAS;EAClB,CAAC;;EAED;EACA,IAAItE,OAAO,EAAE;IACX,oBACEnB,OAAA;MAAK0F,EAAE,EAAC,mBAAmB;MAAAC,QAAA,gBACzB3F,OAAA;QAAGyF,SAAS,EAAC,sBAAsB;QAACC,EAAE,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1D/F,OAAA;QAAA2F,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAEV;EAEA,oBACE/F,OAAA;IAAKyF,SAAS,EAAC,WAAW;IAAAE,QAAA,gBACxB3F,OAAA;MAAQ0F,EAAE,EAAC,QAAQ;MAAAC,QAAA,gBACjB3F,OAAA;QAAA2F,QAAA,EAAI;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACf/F,OAAA;QAAA2F,QAAA,GAAkB,cAAY,EAAC9E,OAAO,KAAK,CAAC,GAAG,MAAM,GAAEA,OAAO,KAAK,CAAC,GAAG,QAAQ,GAAG,MAAM;MAAA,GAA/EA,OAAO;QAAA+E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6E,CAAC,eAC9F/F,OAAA;QAAK0F,EAAE,EAAC,yBAAyB;QAAAC,QAAA,GAC9BtE,YAAY,CAAC2E,GAAG,CAAC,CAACC,KAAa,EAAEC,GAAW,kBAC3ClG,OAAA;UAAQyF,SAAS,EAAC,aAAa;UAAWU,OAAO,EAAEA,CAAA,KAAMxE,gBAAgB,CAACuE,GAAG,CAAE;UAAAP,QAAA,EAAEM;QAAK,GAAjDC,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuD,CAChG,CAAC,eACF/F,OAAA;UAAQyF,SAAS,EAAC,aAAa;UAACW,KAAK,EAAE;YAACC,WAAW,EAAE;UAAS,CAAE;UAACF,OAAO,EAAEA,CAAA,KAAMZ,UAAU,CAAC,CAAE;UAAAI,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC3GxE,OAAO,CAACyE,GAAG,CAAEhE,MAAqB,iBACjChC,OAAA;UAAQyF,SAAS,EAAC,aAAa;UAACW,KAAK,EAAE;YAACC,WAAW,EAAErE,MAAM,CAACP;UAAO,CAAE;UAClD0E,OAAO,EAAEA,CAAA,KAAMpE,YAAY,CAACC,MAAM,CAACR,KAAK,CAAE;UAAAmE,QAAA,EAAE3D,MAAM,CAACR;QAAK,GAAtEQ,MAAM,CAACR,KAAK;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmE,CACrF,CAAC,EACA,CAAC9E,QAAQ,IAAIF,MAAM,gBAAIf,OAAA;UAAKyF,SAAS,EAAC,WAAW;UAAAE,QAAA,EAAC;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,GAAE,EAAE,EAC9D,CAAC9E,QAAQ,IAAI,CAACF,MAAM,gBAAIf,OAAA;UAAKyF,SAAS,EAAC,WAAW;UAAAE,QAAA,EAAC;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,GAAE,EAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACT/F,OAAA;MAAK0F,EAAE,EAAC,iBAAiB;MAAAC,QAAA,eACvB3F,OAAA;QAAA2F,QAAA,eACE3F,OAAA;UAAA2F,QAAA,EACGhF,KAAK,CAACqF,GAAG,CAAC,CAACM,GAAkB,EAAEjG,CAAS,kBACvCL,OAAA;YAAA2F,QAAA,EACGW,GAAG,CAACN,GAAG,CAAC,CAACO,GAAgB,EAAEhG,CAAS,kBACnCP,OAAA;cAAIyF,SAAS,EAAED,kBAAkB,CAACnF,CAAC,EAAEE,CAAC,CAAE;cAAAoF,QAAA,EACrCY,GAAG,CAAC7F,QAAQ,GAAG6F,GAAG,CAAC/F,GAAG,gBACpBR,OAAA;gBAAOuE,IAAI,EAAEgC,GAAG,CAAC9F,KAAK,CAACmE,QAAQ,CAAC,CAAE;gBAAC4B,QAAQ,EAAGtB,CAAC,IAAKD,WAAW,CAACC,CAAC,EAAE7E,CAAC,EAAEE,CAAC;cAAE;gBAAAqF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnF,CACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAA7F,EAAA,CAtWKD,GAAG;AAAAwG,EAAA,GAAHxG,GAAG;AAwWT,eAAeA,GAAG;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}